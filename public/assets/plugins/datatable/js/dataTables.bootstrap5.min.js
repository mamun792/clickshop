/*!
 DataTables Bootstrap 5 integration
 2020 SpryMedia Ltd - datatables.net/license
*/
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.findInternal = function (a, b, c) {
    a instanceof String && (a = String(a));
    for (var e = a.length, d = 0; d < e; d++) {
        var f = a[d];
        if (b.call(c, f, d, a))
            return {
                i: d,
                v: f,
            };
    }
    return {
        i: -1,
        v: void 0,
    };
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.ISOLATE_POLYFILLS = !1;
$jscomp.defineProperty =
    $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties
        ? Object.defineProperty
        : function (a, b, c) {
              if (a == Array.prototype || a == Object.prototype) return a;
              a[b] = c.value;
              return a;
          };
$jscomp.getGlobal = function (a) {
    a = [
        "object" == typeof globalThis && globalThis,
        a,
        "object" == typeof window && window,
        "object" == typeof self && self,
        "object" == typeof global && global,
    ];
    for (var b = 0; b < a.length; ++b) {
        var c = a[b];
        if (c && c.Math == Math) return c;
    }
    throw Error("Cannot find global object");
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.IS_SYMBOL_NATIVE =
    "function" === typeof Symbol && "symbol" === typeof Symbol("x");
$jscomp.TRUST_ES6_POLYFILLS =
    !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;
$jscomp.polyfills = {};
$jscomp.propertyToPolyfillSymbol = {};
$jscomp.POLYFILL_PREFIX = "$jscp$";
var $jscomp$lookupPolyfilledValue = function (a, b) {
    var c = $jscomp.propertyToPolyfillSymbol[b];
    if (null == c) return a[b];
    c = a[c];
    return void 0 !== c ? c : a[b];
};
$jscomp.polyfill = function (a, b, c, e) {
    b &&
        ($jscomp.ISOLATE_POLYFILLS
            ? $jscomp.polyfillIsolated(a, b, c, e)
            : $jscomp.polyfillUnisolated(a, b, c, e));
};
$jscomp.polyfillUnisolated = function (a, b, c, e) {
    c = $jscomp.global;
    a = a.split(".");
    for (e = 0; e < a.length - 1; e++) {
        var d = a[e];
        if (!(d in c)) return;
        c = c[d];
    }
    a = a[a.length - 1];
    e = c[a];
    b = b(e);
    b != e &&
        null != b &&
        $jscomp.defineProperty(c, a, {
            configurable: !0,
            writable: !0,
            value: b,
        });
};
$jscomp.polyfillIsolated = function (a, b, c, e) {
    var d = a.split(".");
    a = 1 === d.length;
    e = d[0];
    e = !a && e in $jscomp.polyfills ? $jscomp.polyfills : $jscomp.global;
    for (var f = 0; f < d.length - 1; f++) {
        var l = d[f];
        if (!(l in e)) return;
        e = e[l];
    }
    d = d[d.length - 1];
    c = $jscomp.IS_SYMBOL_NATIVE && "es6" === c ? e[d] : null;
    b = b(c);
    null != b &&
        (a
            ? $jscomp.defineProperty($jscomp.polyfills, d, {
                  configurable: !0,
                  writable: !0,
                  value: b,
              })
            : b !== c &&
              (($jscomp.propertyToPolyfillSymbol[d] = $jscomp.IS_SYMBOL_NATIVE
                  ? $jscomp.global.Symbol(d)
                  : $jscomp.POLYFILL_PREFIX + d),
              (d = $jscomp.propertyToPolyfillSymbol[d]),
              $jscomp.defineProperty(e, d, {
                  configurable: !0,
                  writable: !0,
                  value: b,
              })));
};
$jscomp.polyfill(
    "Array.prototype.find",
    function (a) {
        return a
            ? a
            : function (b, c) {
                  return $jscomp.findInternal(this, b, c).v;
              };
    },
    "es6",
    "es3"
);
(function (a) {
    "function" === typeof define && define.amd
        ? define(["jquery", "datatables.net"], function (b) {
              return a(b, window, document);
          })
        : "object" === typeof exports
        ? (module.exports = function (b, c) {
              b || (b = window);
              c && c.fn.dataTable || (c = require("datatables.net")(b, c).$);
              return a(c, b, b.document);
          })
        : a(jQuery, window, document);
})(function (a, b, c, e) {
    var d = a.fn.dataTable;
    a.extend(!0, d.defaults, {
        dom: "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
        renderer: "bootstrap",
    });
    a.extend(d.ext.classes, {
        sWrapper: "dataTables_wrapper dt-bootstrap5",
        sFilterInput: "form-control form-control-sm tableSearchber",
        sLengthSelect: "form-select form-select-sm",
        sProcessing: "dataTables_processing card",
        sPageButton: "paginate_button page-item",
    });

    // New: Destroy existing DataTable before initialization
    d.destroyAndInit = function (selector, options) {
        if ($.fn.DataTable.isDataTable(selector)) {
            $(selector).DataTable().destroy();
        }
        return $(selector).DataTable(options);
    };

    d.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {
        var api = new d.Api(settings),
            classes = settings.oClasses,
            lang = settings.oLanguage.oPaginate,
            aria = settings.oLanguage.oAria.paginate || {},
            counter = 0;
    
        var attach = function (container, buttons) {
            var i, btn, node, clickHandler = function (e) {
                e.preventDefault();
                if (!$(e.currentTarget).hasClass('disabled') && api.page() !== e.data.action) {
                    api.page(e.data.action).draw('page');
                }
            };
    
            for (i = 0; i < buttons.length; i++) {
                btn = buttons[i];
    
                if (Array.isArray(btn)) {
                    attach(container, btn);
                } else {
                    var text = '',
                        className = '';
    
                    switch (btn) {
                        case 'ellipsis':
                            text = '&#x2026;';
                            className = 'disabled';
                            break;
    
                        case 'first':
                            text = lang.sFirst;
                            className = btn + (page > 0 ? '' : ' disabled');
                            break;
    
                        case 'previous':
                            text = lang.sPrevious;
                            className = btn + (page > 0 ? '' : ' disabled');
                            break;
    
                        case 'next':
                            text = lang.sNext;
                            className = btn + (page < pages - 1 ? '' : ' disabled');
                            break;
    
                        case 'last':
                            text = lang.sLast;
                            className = btn + (page < pages - 1 ? '' : ' disabled');
                            break;
    
                        default:
                            text = btn + 1;
                            className = page === btn ? 'active' : '';
                            break;
                    }
    
                    if (text) {
                        node = $('<li>', {
                            class: classes.sPageButton + ' ' + className,
                            id: idx === 0 && typeof btn === 'string' ? settings.sTableId + '_' + btn : null,
                        })
                            .append(
                                $('<a>', {
                                    href: '#',
                                    'aria-controls': settings.sTableId,
                                    'aria-label': aria[btn],
                                    'data-dt-idx': counter,
                                    tabindex: settings.iTabIndex,
                                    class: 'page-link',
                                }).html(text)
                            )
                            .appendTo(container);
    
                        settings.oApi._fnBindAction(node, { action: btn }, clickHandler);
    
                        counter++;
                    }
                }
            }
        };
    
        attach($(host).empty().html('<ul class="pagination"/>').children('ul'), buttons);
    };
    

    return d;
});
